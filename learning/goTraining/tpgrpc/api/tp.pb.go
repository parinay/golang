// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/tp.proto

package tpgrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TPRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TPRequest) Reset()         { *m = TPRequest{} }
func (m *TPRequest) String() string { return proto.CompactTextString(m) }
func (*TPRequest) ProtoMessage()    {}
func (*TPRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78cf6bff22c64b59, []int{0}
}

func (m *TPRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TPRequest.Unmarshal(m, b)
}
func (m *TPRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TPRequest.Marshal(b, m, deterministic)
}
func (m *TPRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TPRequest.Merge(m, src)
}
func (m *TPRequest) XXX_Size() int {
	return xxx_messageInfo_TPRequest.Size(m)
}
func (m *TPRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TPRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TPRequest proto.InternalMessageInfo

type TPResponse struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TPResponse) Reset()         { *m = TPResponse{} }
func (m *TPResponse) String() string { return proto.CompactTextString(m) }
func (*TPResponse) ProtoMessage()    {}
func (*TPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78cf6bff22c64b59, []int{1}
}

func (m *TPResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TPResponse.Unmarshal(m, b)
}
func (m *TPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TPResponse.Marshal(b, m, deterministic)
}
func (m *TPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TPResponse.Merge(m, src)
}
func (m *TPResponse) XXX_Size() int {
	return xxx_messageInfo_TPResponse.Size(m)
}
func (m *TPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TPResponse proto.InternalMessageInfo

func (m *TPResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*TPRequest)(nil), "tpgrpc.TPRequest")
	proto.RegisterType((*TPResponse)(nil), "tpgrpc.TPResponse")
}

func init() { proto.RegisterFile("api/tp.proto", fileDescriptor_78cf6bff22c64b59) }

var fileDescriptor_78cf6bff22c64b59 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2c, 0xc8, 0xd4,
	0x2f, 0x29, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2b, 0x29, 0x48, 0x2f, 0x2a, 0x48,
	0x56, 0xe2, 0xe6, 0xe2, 0x0c, 0x09, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x52, 0xe0,
	0xe2, 0x02, 0x71, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x4a, 0x52, 0x2b,
	0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0xa3, 0xf9, 0x8c, 0x5c, 0x4c, 0x25,
	0x05, 0x42, 0x06, 0x5c, 0xac, 0x1e, 0xa9, 0x39, 0x39, 0xf9, 0x42, 0x82, 0x7a, 0x10, 0x73, 0xf4,
	0xe0, 0x86, 0x48, 0x09, 0x21, 0x0b, 0x41, 0x8c, 0x52, 0x62, 0x10, 0xd2, 0xe7, 0x62, 0x09, 0xc9,
	0xcc, 0x4d, 0x25, 0x5e, 0x83, 0x19, 0x17, 0xa7, 0x7b, 0x51, 0x6a, 0x6a, 0x49, 0x66, 0x5e, 0x7a,
	0x31, 0xd1, 0xba, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0xfe, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x6a, 0x77, 0x30, 0x81, 0xef, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TpClient is the client API for Tp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TpClient interface {
	Hello(ctx context.Context, in *TPRequest, opts ...grpc.CallOption) (*TPResponse, error)
	Time(ctx context.Context, in *TPRequest, opts ...grpc.CallOption) (*TPResponse, error)
	Greetings(ctx context.Context, in *TPRequest, opts ...grpc.CallOption) (Tp_GreetingsClient, error)
}

type tpClient struct {
	cc *grpc.ClientConn
}

func NewTpClient(cc *grpc.ClientConn) TpClient {
	return &tpClient{cc}
}

func (c *tpClient) Hello(ctx context.Context, in *TPRequest, opts ...grpc.CallOption) (*TPResponse, error) {
	out := new(TPResponse)
	err := c.cc.Invoke(ctx, "/tpgrpc.tp/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpClient) Time(ctx context.Context, in *TPRequest, opts ...grpc.CallOption) (*TPResponse, error) {
	out := new(TPResponse)
	err := c.cc.Invoke(ctx, "/tpgrpc.tp/Time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpClient) Greetings(ctx context.Context, in *TPRequest, opts ...grpc.CallOption) (Tp_GreetingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tp_serviceDesc.Streams[0], "/tpgrpc.tp/Greetings", opts...)
	if err != nil {
		return nil, err
	}
	x := &tpGreetingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tp_GreetingsClient interface {
	Recv() (*TPResponse, error)
	grpc.ClientStream
}

type tpGreetingsClient struct {
	grpc.ClientStream
}

func (x *tpGreetingsClient) Recv() (*TPResponse, error) {
	m := new(TPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TpServer is the server API for Tp service.
type TpServer interface {
	Hello(context.Context, *TPRequest) (*TPResponse, error)
	Time(context.Context, *TPRequest) (*TPResponse, error)
	Greetings(*TPRequest, Tp_GreetingsServer) error
}

// UnimplementedTpServer can be embedded to have forward compatible implementations.
type UnimplementedTpServer struct {
}

func (*UnimplementedTpServer) Hello(ctx context.Context, req *TPRequest) (*TPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedTpServer) Time(ctx context.Context, req *TPRequest) (*TPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Time not implemented")
}
func (*UnimplementedTpServer) Greetings(req *TPRequest, srv Tp_GreetingsServer) error {
	return status.Errorf(codes.Unimplemented, "method Greetings not implemented")
}

func RegisterTpServer(s *grpc.Server, srv TpServer) {
	s.RegisterService(&_Tp_serviceDesc, srv)
}

func _Tp_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpgrpc.tp/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpServer).Hello(ctx, req.(*TPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tp_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpgrpc.tp/Time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpServer).Time(ctx, req.(*TPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tp_Greetings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TpServer).Greetings(m, &tpGreetingsServer{stream})
}

type Tp_GreetingsServer interface {
	Send(*TPResponse) error
	grpc.ServerStream
}

type tpGreetingsServer struct {
	grpc.ServerStream
}

func (x *tpGreetingsServer) Send(m *TPResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Tp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tpgrpc.tp",
	HandlerType: (*TpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Tp_Hello_Handler,
		},
		{
			MethodName: "Time",
			Handler:    _Tp_Time_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Greetings",
			Handler:       _Tp_Greetings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/tp.proto",
}
